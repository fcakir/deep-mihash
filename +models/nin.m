function [net, imageSize, normalize] = nin(opts)
% train NIN end-to-end
if strcmp(opts.dataset, 'cifar')
    net = nin_cifar(opts);
    imageSize = 32;
    normalize = true;
else
    net = nin_generic(opts);
    imageSize = [];
    normalize = [];
end
end


function net = nin_cifar(opts)
% CIFAR-10 model from
% M. Lin, Q. Chen, and S. Yan. Network in network. CoRR,
% abs/1312.4400, 2013.
%
% It reproduces the NIN + Dropout result of Table 1 (<= 10.41% top1 error).
opts.networkType = 'simplenn' ;
net.layers = {} ;

lr = [1 0.1] ;

% Block 1
net.layers{end+1} = struct('type', 'conv', ...
    'name', 'conv1', ...
    'weights', {models.init_weights(5,3,192)}, ...
    'learningRate', lr, ...
    'stride', 1, ...
    'pad', 2) ;
net.layers{end+1} = struct('type', 'relu', 'name', 'relu1') ;
net.layers{end+1} = struct('type', 'conv', ...
    'name', 'cccp1', ...
    'weights', {models.init_weights(1,192,160)}, ...
    'learningRate', lr, ...
    'stride', 1, ...
    'pad', 0) ;
net.layers{end+1} = struct('type', 'relu', 'name', 'relu_cccp1') ;
net.layers{end+1} = struct('type', 'conv', ...
    'name', 'cccp2', ...
    'weights', {models.init_weights(1,160,96)}, ...
    'learningRate', lr, ...
    'stride', 1, ...
    'pad', 0) ;
net.layers{end+1} = struct('type', 'relu', 'name', 'relu_cccp2') ;
net.layers{end+1} = struct('name', 'pool1', ...
    'type', 'pool', ...
    'method', 'max', ...
    'pool', [3 3], ...
    'stride', 2, ...
    'pad', 0) ;
net.layers{end+1} = struct('type', 'dropout', 'name', 'dropout1', 'rate', 0.5) ;

% Block 2
net.layers{end+1} = struct('type', 'conv', ...
    'name', 'conv2', ...
    'weights', {models.init_weights(5,96,192)}, ...
    'learningRate', lr, ...
    'stride', 1, ...
    'pad', 2) ;
net.layers{end+1} = struct('type', 'relu', 'name', 'relu2') ;
net.layers{end+1} = struct('type', 'conv', ...
    'name', 'cccp3', ...
    'weights', {models.init_weights(1,192,192)}, ...
    'learningRate', lr, ...
    'stride', 1, ...
    'pad', 0) ;
net.layers{end+1} = struct('type', 'relu', 'name', 'relu_cccp3') ;
net.layers{end+1} = struct('type', 'conv', ...
    'name', 'cccp4', ...
    'weights', {models.init_weights(1,192,192)}, ...
    'learningRate', lr, ...
    'stride', 1, ...
    'pad', 0) ;
net.layers{end+1} = struct('type', 'relu', 'name', 'relu_cccp4') ;
net.layers{end+1} = struct('name', 'pool2', ...
    'type', 'pool', ...
    'method', 'avg', ...
    'pool', [3 3], ...
    'stride', 2, ...
    'pad', 0) ;
net.layers{end+1} = struct('type', 'dropout', 'name', 'dropout2', 'rate', 0.5) ;

% Block 3
net.layers{end+1} = struct('type', 'conv', ...
    'name', 'conv3', ...
    'weights', {models.init_weights(3,192,192)}, ...
    'learningRate', lr, ...
    'stride', 1, ...
    'pad', 1) ;
net.layers{end+1} = struct('type', 'relu', 'name', 'relu3') ;
net.layers{end+1} = struct('type', 'conv', ...
    'name', 'cccp5', ...
    'weights', {models.init_weights(1,192,192)}, ...
    'learningRate', lr, ...
    'stride', 1, ...
    'pad', 0) ;
net.layers{end+1} = struct('type', 'relu', 'name', 'relu_cccp5') ;
net.layers{end+1} = struct('type', 'conv', ...
    'name', 'cccp6', ...
    'weights', {models.init_weights(1,192,opts.nbits)}, ...
    'learningRate', 0.001*lr, ...
    'stride', 1, ...
    'pad', 0) ;
net.layers{end}.weights{1} = 0.1 * net.layers{end}.weights{1} ;
%net.layers{end+1} = struct('type', 'relu', 'name', 'relu_cccp6') ;
net.layers{end+1} = struct('type', 'pool', ...
    'name', 'pool3', ...
    'method', 'avg', ...
    'pool', [7 7], ...
    'stride', 1, ...
    'pad', 0) ;

% Loss layer
%net.layers{end+1} = struct('type', 'loss', 'losstype', 'logistic') ;
net.layers{end+1} = struct('type', 'custom', ...
    'name', 'loss', ...
    'opts', opts, ...
    'forward', str2func([opts.obj '_forward']), ...
    'backward', str2func([opts.obj, '_backward']));
net.layers{end}.precious = false;
net.layers{end}.weights = {};

% Meta parameters
net.meta.inputSize = [32 32 3] ;

% Fill in default values
net = vl_simplenn_tidy(net) ;
end
